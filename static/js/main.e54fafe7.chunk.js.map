{"version":3,"sources":["logo.svg","components/modals/close-button.svg","components/header/Header.js","contexts/RadioContext.js","components/menu/Menu.js","components/modals/Modal.js","contexts/PagesContext.js","components/modals/CharacterModal.js","contexts/InputContext.js","components/sections/Characters.js","components/modals/LocationModal.js","components/sections/Locations.js","components/modals/EpisodeModal.js","components/sections/Episodes.js","components/contentContainer/ContentContainer.js","components/footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","RadioContext","createContext","Menu","useContext","radio","setRadio","type","checked","value","onChange","e","target","Modal","title","children","close","onClick","closeButton","PagesContext","CharacterModal","selectedCharacter","setDisplayCharacterModal","name","image","gender","species","InputContext","Characters","input","useState","pageNumber","setPageNumber","setSelectedCharacter","displayCharacterModal","dataQuery","gql","useQuery","loading","error","data","dataCharacters","characters","results","map","character","key","id","characterInfo","Provider","disabled","LocationsModal","selectedLocation","setDisplayLocationModal","residents","slice","resident","dimension","Locations","setSelectedLocation","displayLocationModal","dataLocations","locations","location","locationInfo","LocationModal","ModalEpisode","selectedEpisode","setDisplayEpisodeModal","air_date","episode","Episodes","setSelectedEpisode","displayEpisodeModal","dataEpisodes","episodes","episodeInfo","EpisodeModal","ContentContainer","setInput","searchRef","useRef","ref","placeholder","current","Footer","App","Boolean","window","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e54fafe7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cd45d91d.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-button.aeec2863.svg\";","import React from 'react';\r\nimport logo from '../../logo.svg';\r\nimport './Header.scss';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">      \r\n            <div className=\"header-content\">\r\n                <img \r\n                    src={logo} \r\n                    className=\"header-logo\"\r\n                    alt=\"Logo\" \r\n                />\r\n                <h1 className=\"header-title\">Welcome to <strong>Rick and Morty</strong> Page</h1>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import { createContext } from 'react';\r\n\r\nconst RadioContext = createContext(null);\r\n\r\nexport default RadioContext;\r\n","import React, { useContext } from 'react';\r\nimport './Menu.scss';\r\nimport RadioContext from '../../contexts/RadioContext';\r\n\r\nconst Menu = () => {    \r\n    const {radio, setRadio} = useContext(RadioContext);\r\n\r\n    return (    \r\n        <nav className=\"menu-filter\">\r\n            <h2 className=\"menu-filter-title\">Filters</h2>\r\n            <ul className=\"menu-filter-ul\">\r\n                <li>\r\n                    <input \r\n                        type=\"radio\" \r\n                        checked={radio === \"characters\"} \r\n                        value=\"characters\" \r\n                        onChange={(e) => setRadio(e.target.value)} \r\n                    />  Characters 🙂\r\n                </li>\r\n                <li>\r\n                    <input \r\n                        type=\"radio\" \r\n                        checked={radio === \"episodes\"} \r\n                        value=\"episodes\" \r\n                        onChange={(e) => setRadio(e.target.value)} \r\n                    />  Episodes 🤩\r\n                </li>\r\n                <li>\r\n                    <input \r\n                        type=\"radio\" \r\n                        checked={radio === \"locations\"} \r\n                        value=\"locations\" \r\n                        onChange={(e) => setRadio(e.target.value)} \r\n                    />  Locations 📍\r\n                </li>\r\n            </ul>\r\n        </nav>  \r\n    );\r\n}\r\n\r\nexport default Menu;\r\n","import React, { Fragment } from \"react\";\r\nimport './Modal.scss';\r\nimport closeButton from './close-button.svg';\r\n\r\nconst Modal = ({title, children, close}) => {\r\n    return (\r\n        <Fragment>\r\n            <div className=\"overlay\"></div>\r\n            <section className=\"modal\">\r\n                <header className=\"modal-header\">\r\n                    <h2 className=\"modal-title\">{title}</h2>\r\n                    <button \r\n                        className=\"modal-button\"\r\n                        type=\"button\" \r\n                        onClick={close}>\r\n                        <img \r\n                            className=\"modal-button-img\"\r\n                            src={closeButton} \r\n                        />\r\n                    </button>\r\n                </header>\r\n                <article className=\"modal-content\">\r\n                    {children}\r\n                </article>\r\n            </section>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Modal;\r\n","import { createContext } from 'react';\r\n\r\nconst PagesContext = createContext(null);\r\n\r\nexport default PagesContext;\r\n","import React, { useContext } from 'react';\r\nimport Modal from './Modal';\r\nimport PagesContext from '../../contexts/PagesContext';\r\n\r\nconst CharacterModal = () => {  \r\n    const {selectedCharacter, setDisplayCharacterModal} = useContext(PagesContext);\r\n\r\n    const close = () => setDisplayCharacterModal(false);\r\n    \r\n    return (\r\n        <Modal title={selectedCharacter.name} close={close}>\r\n            <figure className=\"page-modals-figure\">\r\n                <img \r\n                    className=\"page-modals-figure-img\"\r\n                    src={selectedCharacter.image}\r\n                    alt={selectedCharacter.name} \r\n                />\r\n                <figcaption className=\"page-modals-figcaption\">\r\n                    <p className=\"page-modals-figcaption-p\"><strong>Type:</strong>\r\n                        {` ${selectedCharacter.type === \"\" ? \r\n                            'No Information Available' : selectedCharacter.type}\r\n                        `} \r\n                    </p>\r\n                    <p className=\"page-modals-figcaption-p\"><strong>Gender:</strong>\r\n                        {` ${selectedCharacter.gender === \"\" ? \r\n                            'No Information Available' : selectedCharacter.gender}\r\n                        `}\r\n                    </p>\r\n                    <p className=\"page-modals-figcaption-p\"><strong>Specie:</strong>\r\n                        {` ${selectedCharacter.species === \"\" ? \r\n                            'No Information Available' : selectedCharacter.species}\r\n                        `}\r\n                    </p>\r\n                </figcaption>\r\n            </figure>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default CharacterModal;\r\n","import { createContext } from 'react';\r\n\r\nconst InputContext = createContext(null);\r\n\r\nexport default InputContext;\r\n","import React, { useState, useContext } from 'react';\r\nimport CharacterModal from '../modals/CharacterModal';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport InputContext from '../../contexts/InputContext';\r\nimport PagesContext from '../../contexts/PagesContext';\r\n\r\nconst Characters = () => {\r\n    const {input} = useContext(InputContext);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [selectedCharacter, setSelectedCharacter] = useState();\r\n    const [displayCharacterModal, setDisplayCharacterModal] = useState(false);\r\n\r\n    const characterInfo = character => {\r\n        setSelectedCharacter(character);\r\n        setDisplayCharacterModal(true);\r\n    };\r\n\r\n    const nextPage = () => setPageNumber(pageNumber + 1);\r\n\r\n    const prevPage = () => setPageNumber(pageNumber - 1);\r\n\r\n    const dataQuery = gql`\r\n    query {\r\n        characters(page:${pageNumber}, filter:{name:\"${input}\"}) {\r\n            results {\r\n                id\r\n                name\r\n                image\r\n                type\r\n                gender\r\n                species\r\n            }\r\n        }\r\n    }`;\r\n\r\n    const { loading, error, data } = useQuery(dataQuery);\r\n\r\n    if (loading) return <h1 className=\"loading-error\">Loading...✨</h1>;\r\n    if (error) return <h1 className=\"loading-error\">Error!😭</h1>;\r\n    \r\n    const characters = data.characters.results;\r\n\r\n    const dataCharacters = characters.map(character => {\r\n        return (\r\n            <div key={character.id} className=\"content-section-cards-card\">\r\n                <img  \r\n                    className=\"content-section-cards-card-img\" \r\n                    src={character.image} \r\n                    alt={character.name} \r\n                />\r\n                <h3 className=\"content-section-cards-card-title\">{character.name}</h3>\r\n                <button \r\n                    className=\"content-section-cards-card-button\"\r\n                    onClick={() => characterInfo(character)}>\r\n                    View More\r\n                </button>\r\n            </div>\r\n        );\r\n    });   \r\n    \r\n    return (\r\n        <PagesContext.Provider value={{ selectedCharacter, setDisplayCharacterModal }}>\r\n            <section className=\"content-section\">\r\n                <h1 className=\"content-section-title\">Characters</h1>\r\n                <div className=\"content-section-cards\">\r\n                    {dataCharacters}\r\n                </div>\r\n                <div className=\"content-section-buttons\">\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"prev-button\" \r\n                        disabled={`${pageNumber === 1 ? 'disabled' : ''}`} \r\n                        onClick={prevPage}>\r\n                        Prev\r\n                    </button>\r\n                    <button \r\n                        type=\"button\"\r\n                        className=\"next-button\" \r\n                        disabled={`${pageNumber === 34 ? 'disabled' : ''}`}\r\n                        onClick={nextPage}>\r\n                        Next\r\n                    </button>\r\n                </div>\r\n                { displayCharacterModal ? <CharacterModal /> : null }\r\n            </section>   \r\n        </PagesContext.Provider>    \r\n    );\r\n}\r\n\r\nexport default Characters;\r\n","import React, { useContext } from 'react';\r\nimport Modal from './Modal';\r\nimport PagesContext from '../../contexts/PagesContext';\r\n\r\nconst LocationsModal = () => {\r\n    const {selectedLocation, setDisplayLocationModal} = useContext(PagesContext);\r\n\r\n    const close = () => setDisplayLocationModal(false);\r\n    \r\n    const firstFiveResidents = selectedLocation.residents.slice(0, 5);\r\n\r\n    const residents = firstFiveResidents.map(resident => {\r\n        return (\r\n            <div key={resident.id} className=\"page-modals-figcaption-mini-cards\">\r\n                <img \r\n                    className=\"page-modals-figcaption-mini-cards-img\" \r\n                    src={resident.image}\r\n                    alt={resident.name} \r\n                />\r\n                <p className=\"page-modals-figcaption-mini-cards-p\">{resident.name}</p>\r\n            </div>\r\n        );\r\n    });       \r\n\r\n    return (       \r\n        <Modal title={selectedLocation.name} close={close}>\r\n            <figure className=\"page-modals-figure\">\r\n                <figcaption className=\"page-modals-figcaption\">\r\n                    <p className=\"page-modals-figcaption-p\"><strong>Type:</strong> \r\n                        {` ${selectedLocation.type === \"\" ? \r\n                            'No Information Available' : selectedLocation.type}\r\n                        `}\r\n                    </p>\r\n                    <p className=\"page-modals-figcaption-p\"><strong>Dimension:</strong> \r\n                        {` ${selectedLocation.dimension === \"\" ? \r\n                            'No Information Available' : selectedLocation.dimension}\r\n                        `}\r\n                    </p>\r\n                    <p className=\"page-modals-figcaption-p\"><strong>Residents:</strong></p>\r\n                    {residents}\r\n                </figcaption>\r\n            </figure>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default LocationsModal;\r\n","import React, { useState, useContext } from 'react';\r\nimport LocationModal from '../modals/LocationModal';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport InputContext from '../../contexts/InputContext';\r\nimport PagesContext from '../../contexts/PagesContext';\r\n\r\nconst Locations = () => {\r\n    const {input} = useContext(InputContext);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [selectedLocation, setSelectedLocation] = useState();\r\n    const [displayLocationModal, setDisplayLocationModal] = useState(false);\r\n\r\n    const locationInfo = location => {\r\n        setSelectedLocation(location);\r\n        setDisplayLocationModal(true);\r\n    };\r\n\r\n    const nextPage = () => setPageNumber(pageNumber + 1);\r\n\r\n    const prevPage = () => setPageNumber(pageNumber - 1);\r\n\r\n    const dataQuery = gql`\r\n    query {\r\n        locations(page:${pageNumber}, filter:{name:\"${input}\"}) {\r\n            results {\r\n                id\r\n                name\r\n                type\r\n                dimension\r\n                residents {\r\n                    id\r\n                    name\r\n                    image\r\n                }\r\n            }\r\n        }\r\n    }`;\r\n\r\n    const { loading, error, data } = useQuery(dataQuery);\r\n\r\n    if (loading) return <h1 className=\"loading-error\">Loading...✨</h1>;\r\n    if (error) return <h1 className=\"loading-error\">Error!😭</h1>;\r\n    \r\n    const locations = data.locations.results;\r\n\r\n    const dataLocations = locations.map(location => {\r\n        return (\r\n            <div key={location.id} className=\"content-section-cards-card\">\r\n                <h3 className=\"content-section-cards-card-title\">{location.name}</h3>\r\n                <p className=\"content-section-cards-card-paragraph\">{location.dimension}</p>\r\n                <button \r\n                    className=\"content-section-cards-card-button\"\r\n                    onClick={() => locationInfo(location)}>\r\n                    View More\r\n                </button>\r\n            </div>\r\n        );\r\n    });\r\n   \r\n    return (\r\n        <PagesContext.Provider value={{ selectedLocation, setDisplayLocationModal }}>\r\n            <section className=\"content-section\">\r\n                <h1 className=\"content-section-title\">Locations</h1>\r\n                <div className=\"content-section-cards\">\r\n                    {dataLocations}\r\n                </div>\r\n                <div className=\"content-section-buttons\">\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"prev-button\" \r\n                        disabled={`${pageNumber === 1 ? 'disabled' : ''}`} \r\n                        onClick={prevPage}>\r\n                        Prev\r\n                    </button>\r\n                    <button \r\n                        type=\"button\"\r\n                        className=\"next-button\" \r\n                        disabled={`${pageNumber === 34 ? 'disabled' : ''}`}\r\n                        onClick={nextPage}>\r\n                        Next\r\n                    </button>\r\n                </div>\r\n                { displayLocationModal ? <LocationModal /> : null }\r\n            </section>\r\n        </PagesContext.Provider>  \r\n    );\r\n}\r\n\r\nexport default Locations;\r\n","import React, { useContext } from 'react';\r\nimport Modal from './Modal';\r\nimport PagesContext from '../../contexts/PagesContext';\r\n\r\nconst ModalEpisode = () => {\r\n    const {selectedEpisode, setDisplayEpisodeModal} = useContext(PagesContext);\r\n\r\n    const close = () => setDisplayEpisodeModal(false);\r\n\r\n    const firstFiveCharacters = selectedEpisode.characters.slice(0, 5);\r\n\r\n    const characters = firstFiveCharacters.map(character => {\r\n        return (\r\n            <div key={character.id} className=\"page-modals-figcaption-mini-cards\">\r\n                <img \r\n                    className=\"page-modals-figcaption-mini-cards-img\" \r\n                    src={character.image}\r\n                    alt={character.name} \r\n                />\r\n                <p className=\"page-modals-figcaption-mini-cards-p\">{character.name}</p>\r\n            </div>\r\n        );\r\n    });          \r\n        \r\n    return (      \r\n        <Modal title={selectedEpisode.name} close={close}>\r\n            <figure className=\"page-modals-figure\">\r\n                <figcaption className=\"page-modals-figcaption\">\r\n                    <p className=\"page-modals-figcaption-p\"><strong>Release date:</strong>\r\n                        {` ${selectedEpisode.air_date === \"\" ? \r\n                            'No Information Available' : selectedEpisode.air_date}\r\n                        `}\r\n                    </p>\r\n                    <p className=\"page-modals-figcaption-p\"><strong>Episode:</strong>\r\n                        {` ${selectedEpisode.episode === \"\" ? \r\n                            'No Information Available' : selectedEpisode.episode}\r\n                        `}\r\n                    </p>\r\n                    <p className=\"page-modals-figcaption-p\"><strong>Characters:</strong></p>\r\n                    {characters}\r\n                </figcaption>\r\n            </figure>     \r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default ModalEpisode;\r\n","import React, { useState, useContext } from 'react';\r\nimport EpisodeModal from '../modals/EpisodeModal';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport InputContext from '../../contexts/InputContext';\r\nimport PagesContext from '../../contexts/PagesContext';\r\n\r\nconst Episodes = () => {\r\n    const {input} = useContext(InputContext);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [selectedEpisode, setSelectedEpisode] = useState();\r\n    const [displayEpisodeModal, setDisplayEpisodeModal] = useState(false);\r\n\r\n    const episodeInfo = episode => {\r\n        setSelectedEpisode(episode);\r\n        setDisplayEpisodeModal(true);\r\n    };\r\n\r\n    const nextPage = () => setPageNumber(pageNumber + 1);\r\n\r\n    const prevPage = () => setPageNumber(pageNumber - 1);\r\n\r\n    const dataQuery = gql`\r\n    query {\r\n        episodes(page:${pageNumber}, filter:{name:\"${input}\"}) {\r\n            results {\r\n                id\r\n                name\r\n                air_date\r\n                episode\r\n                characters {\r\n                    id\r\n                    name\r\n                    image\r\n                }\r\n            }\r\n        }\r\n    }`;\r\n\r\n    const { loading, error, data } = useQuery(dataQuery);\r\n\r\n    if (loading) return <h1 className=\"loading-error\">Loading...✨</h1>;\r\n    if (error) return <h1 className=\"loading-error\">Error!😭</h1>;\r\n    \r\n    const episodes = data.episodes.results;\r\n\r\n    const dataEpisodes = episodes.map(episode => {\r\n        return (\r\n            <div key={episode.id} className=\"content-section-cards-card\">\r\n                <h3 className=\"content-section-cards-card-title\">{episode.name}</h3>\r\n                <p className=\"content-section-cards-card-paragraph\">{episode.episode}</p>\r\n                <button \r\n                    className=\"content-section-cards-card-button\"\r\n                    onClick={() => episodeInfo(episode)}>\r\n                    View More\r\n                </button>\r\n            </div>      \r\n        );\r\n    });\r\n    \r\n    return (\r\n        <PagesContext.Provider value={{ selectedEpisode, setDisplayEpisodeModal }}>\r\n            <section className=\"content-section\">\r\n                <h1 className=\"content-section-title\">Episodes</h1>\r\n                <div className=\"content-section-cards\">\r\n                    {dataEpisodes}\r\n                </div>\r\n                <div className=\"content-section-buttons\">\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"prev-button\" \r\n                        disabled={`${pageNumber === 1 ? 'disabled' : ''}`} \r\n                        onClick={prevPage}>\r\n                        Prev\r\n                    </button>\r\n                    <button \r\n                        type=\"button\"\r\n                        className=\"next-button\" \r\n                        disabled={`${pageNumber === 34 ? 'disabled' : ''}`}\r\n                        onClick={nextPage}>\r\n                        Next\r\n                    </button>\r\n                </div>\r\n                { displayEpisodeModal ? <EpisodeModal /> : null }\r\n            </section>\r\n        </PagesContext.Provider>  \r\n    );\r\n}\r\n\r\nexport default Episodes;\r\n","import React, { useState, useRef, useContext} from 'react';\r\nimport './ContentContainer.scss';\r\nimport Characters from '../sections/Characters';\r\nimport Locations from '../sections/Locations';\r\nimport Episodes from '../sections/Episodes';\r\nimport InputContext from '../../contexts/InputContext';\r\nimport RadioContext from '../../contexts/RadioContext';\r\n\r\n\r\nconst ContentContainer = () => {\r\n    const {radio} = useContext(RadioContext);\r\n    const [input, setInput] = useState('');\r\n    const searchRef = useRef();\r\n    \r\n    const inputValue = e => setInput(e.target.value);\r\n\r\n    const clear = () => {\r\n        searchRef.current.value = '';\r\n        setInput('');\r\n    };\r\n    \r\n    return (\r\n        <InputContext.Provider value={{ input }}>\r\n            <section className=\"content-container\">\r\n                <div className=\"content-container-search\">\r\n                    <input \r\n                        className=\"input-search\"        \r\n                        type=\"text\" \r\n                        ref={searchRef}\r\n                        onChange={inputValue}\r\n                        placeholder=\"Search...\"/>\r\n                    <button \r\n                        className=\"clear-button\" \r\n                        type=\"button\"\r\n                        onClick={clear}>\r\n                        Clear\r\n                    </button>\r\n                </div>\r\n                \r\n                { radio === \"characters\" ? <Characters /> : null } \r\n                { radio === \"episodes\"   ? <Episodes />   : null } \r\n                { radio === \"locations\"  ? <Locations />  : null }    \r\n            </section>\r\n        </InputContext.Provider>\r\n    );\r\n}\r\n\r\nexport default ContentContainer;\r\n","import React from 'react';\r\nimport './Footer.scss';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p>&copy; - Created by Maria Alarcon❤️</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState, Fragment} from 'react';\r\nimport './App.scss';\r\nimport './components/sections/SectionStyles.scss';\r\nimport './components/modals/PageModals.scss';\r\nimport Header from './components/header/Header';\r\nimport Menu from './components/menu/Menu';\r\nimport ContentContainer from './components/contentContainer/ContentContainer';\r\nimport Footer from './components/footer/Footer';\r\nimport Radio from './contexts/RadioContext';\r\n\r\nconst App = () => {\r\n\tconst [radio, setRadio] = useState(\"characters\")\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Header />\r\n\t\t\t<Radio.Provider value={{ radio, setRadio }} >\r\n\t\t\t\t<div className=\"main-nav-content\">\r\n\t\t\t\t\t<Menu />\r\n\t\t\t\t\t<ContentContainer />\t\r\n\t\t\t\t</div>\r\n\t\t\t</Radio.Provider>\r\n\t\t\t<Footer />\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://rickandmortyapi.com/graphql',\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ApolloProvider client={client}><App /></ApolloProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}